#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd $DIR
MODE=release
if [ $MODE = "release" ]; then
    echo Building with clang release version...
    PATH=$DIR/clang/bin:/usr/lib/llvm-3.9/bin:$PATH
else
    echo Building with clang debug version...
    PATH=$DIR/../../llvm/build/bin:$PATH
fi
clang -x c -o $DIR/bangra.h -C -E $DIR/bangra.cpp \
&& clang++ \
    -o $DIR/bangra $DIR/bangra.cpp \
    -pedantic \
    -g -rdynamic \
    -ferror-limit=1 \
    -Wno-vla-extension \
    -DBANGRA_CPP_IMPL -DBANGRA_MAIN_CPP_IMPL \
    -D_GLIBCXX_USE_CXX11_ABI=0 \
    -lpthread -lm -ldl -ltinfo -lz \
    -I$DIR/libffi/include $DIR/libffi/.libs/libffi.a \
    -lclangFrontend -lclangDriver \
    -lclangSerialization -lclangCodeGen -lclangParse -lclangSema \
    -lclangAnalysis \
    -lclangEdit -lclangAST -lclangLex -lclangBasic \
    -Wl,--export-dynamic \
    `llvm-config --cxxflags` \
    `llvm-config --ldflags` \
    -Wl,--whole-archive \
    `llvm-config --libs engine passes option objcarcopts coverage support` \
    -Wl,--no-whole-archive \
    -O0 \
    -fexceptions \
&& $DIR/bangra $DIR/testing/test_all.b
# && gdb --ex r --silent --args $DIR/bangra $DIR/testing/test_bangra.b
