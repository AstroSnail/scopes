#!/usr/bin/env bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd $DIR
MODE=debug
if [ $MODE = "release" ]; then
    echo Building release version...
    PATH=$DIR/clang/bin:/usr/lib/llvm-4.0/bin:$PATH
    OPT_G=
    OPT_O=-O3
    OPT_MODE=
else
    echo Building debug version...
    #PATH=$DIR/../../llvm/build/bin:$PATH
    PATH=$DIR/clang/bin:/usr/lib/llvm-4.0/bin:$PATH
    OPT_G=-g
    OPT_O=-O0
    OPT_MODE=-DSCOPES_DEBUG
fi
echo "scopes.h"
clang -x c -o $DIR/scopes.h -I$DIR/libffi/include -I$DIR -P -E $DIR/scopes.cpp \
&& echo "linenoise.o" \
&& clang -c -o $DIR/linenoise.o $DIR/external/linenoise-ng/src/linenoise.cpp -O2 \
    -I $DIR/external/linenoise-ng/include -std=gnu++11 -fno-rtti \
&& echo "ConvertUTF.o" \
&& clang -c -o $DIR/ConvertUTF.o $DIR/external/linenoise-ng/src/ConvertUTF.cpp -O2 \
    -I $DIR/external/linenoise-ng/include -std=gnu++11 -fno-rtti \
&& echo "wcwidth.o" \
&& clang -c -o $DIR/wcwidth.o $DIR/external/linenoise-ng/src/wcwidth.cpp -O2 \
    -I $DIR/external/linenoise-ng/include -std=gnu++11 -fno-rtti \
&& echo "scopes" \
&& time clang++ \
    -rdynamic \
    -o $DIR/scopes \
    $DIR/scopes.cpp \
    -pedantic -Wall \
    $OPT_G \
    -ferror-limit=1 \
    $OPT_MODE -DSCOPES_CPP_IMPL -DSCOPES_MAIN_CPP_IMPL \
    -D_GLIBCXX_USE_CXX11_ABI=0 \
    -lpthread -lm -ltinfo -lz -ldl \
    -I$DIR/libffi/include \
    -I$DIR \
    -lclangFrontend -lclangDriver \
    -lclangSerialization -lclangCodeGen -lclangParse -lclangSema \
    -lclangAnalysis \
    -lclangEdit -lclangAST -lclangLex -lclangBasic \
    -Wl,--export-dynamic \
    `llvm-config --cxxflags` \
    `llvm-config --ldflags` \
    -Wl,--whole-archive \
    $DIR/libffi/.libs/libffi.a \
    $DIR/linenoise.o $DIR/ConvertUTF.o $DIR/wcwidth.o \
    `llvm-config --libs engine passes option objcarcopts coverage support lto coroutines` \
    -Wl,--no-whole-archive \
    $OPT_O \
&& echo "executing test_all.sc..." \
&& $DIR/scopes $DIR/testing/test_all.sc
# && gdb --ex r --silent --args $DIR/scopes $DIR/testing/test_scopes.sc
